#ifndef PLAYER_H
#define PLAYER_H

#include <Arduboy2.h>
#include <ArduboyTones.h>


// SPRITES
uint8_t PROGMEM monkey[] =
{
// width, height,
16, 16,
// FRAME 00
0xc0, 0xc0, 0x3e, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x3f, 0xff, 0x3e, 0xfe, 0x03, 0xff, 0x3f, 0xff, 
0x90, 0xf0, 0x50, 0xf0, 0x18, 0xf8, 0x84, 0xfc, 0x24, 0xfc, 0x38, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 
0x03, 0x03, 0x04, 0x07, 0x68, 0x6f, 0x98, 0x9f, 0x88, 0x8f, 0x88, 0x8f, 0x08, 0x0f, 0x08, 0x0f, 
0x13, 0x1f, 0x14, 0x1f, 0x31, 0x3f, 0x42, 0x7f, 0x48, 0x7f, 0x39, 0x3f, 0x0f, 0x0f, 0x03, 0x03, 

// FRAME 01
0xfe, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x3f, 0xff, 0x20, 0xe0, 0x3e, 0xfe, 0x03, 0xff, 0x3f, 0xff, 
0x90, 0xf0, 0x50, 0xf0, 0x18, 0xf8, 0x84, 0xfc, 0x24, 0xfc, 0x38, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 
0x03, 0x03, 0x04, 0x07, 0x68, 0x6f, 0x98, 0x9f, 0x88, 0x8f, 0x88, 0x8f, 0x08, 0x0f, 0x08, 0x0f, 
0x13, 0x1f, 0x14, 0x1f, 0x31, 0x3f, 0x42, 0x7f, 0x48, 0x7f, 0x39, 0x3f, 0x0f, 0x0f, 0x03, 0x03, 

// FRAME 02
0xfe, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x3f, 0xff, 0x20, 0xe0, 0x20, 0xe0, 0x3e, 0xfe, 0x03, 0xff, 
0x9f, 0xff, 0x50, 0xf0, 0x18, 0xf8, 0x84, 0xfc, 0x24, 0xfc, 0x38, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 
0x03, 0x03, 0x04, 0x07, 0x68, 0x6f, 0x98, 0x9f, 0x88, 0x8f, 0x88, 0x8f, 0x08, 0x0f, 0x08, 0x0f, 
0x13, 0x1f, 0x14, 0x1f, 0x31, 0x3f, 0x42, 0x7f, 0x48, 0x7f, 0x39, 0x3f, 0x0f, 0x0f, 0x03, 0x03, 

// FRAME 03
0xfe, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x3f, 0xff, 0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x1e, 0xfe, 
0x93, 0xff, 0x5f, 0xff, 0x18, 0xf8, 0x84, 0xfc, 0x24, 0xfc, 0x38, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 
0x03, 0x03, 0x04, 0x07, 0x68, 0x6f, 0x98, 0x9f, 0x88, 0x8f, 0x88, 0x8f, 0x08, 0x0f, 0x08, 0x0f, 
0x13, 0x1f, 0x14, 0x1f, 0x31, 0x3f, 0x42, 0x7f, 0x48, 0x7f, 0x39, 0x3f, 0x0f, 0x0f, 0x03, 0x03,
};

uint8_t PROGMEM monkeyR[] =
{
// width, height,
16, 16,
// FRAME 00
0xc0, 0xc0, 0x20, 0xe0, 0x16, 0xf6, 0x19, 0xf9, 0x11, 0xf1, 0x11, 0xf1, 0x10, 0xf0, 0x10, 0xf0, 
0xc8, 0xf8, 0x28, 0xf8, 0x8c, 0xfc, 0x42, 0xfe, 0x12, 0xfe, 0x9c, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 
0x03, 0x03, 0x7c, 0x7f, 0x80, 0xff, 0x80, 0xff, 0xfc, 0xff, 0x7c, 0x7f, 0xc0, 0xff, 0xfc, 0xff, 
0x09, 0x0f, 0x0a, 0x0f, 0x18, 0x1f, 0x21, 0x3f, 0x24, 0x3f, 0x1c, 0x1f, 0x07, 0x07, 0x01, 0x01, 

// FRAME 01
0xc0, 0xc0, 0x20, 0xe0, 0x16, 0xf6, 0x19, 0xf9, 0x11, 0xf1, 0x11, 0xf1, 0x10, 0xf0, 0x10, 0xf0, 
0xc8, 0xf8, 0x28, 0xf8, 0x8c, 0xfc, 0x42, 0xfe, 0x12, 0xfe, 0x9c, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 
0x7f, 0x7f, 0x80, 0xff, 0x80, 0xff, 0xfc, 0xff, 0x04, 0x07, 0x7c, 0x7f, 0xc0, 0xff, 0xfc, 0xff, 
0x09, 0x0f, 0x0a, 0x0f, 0x18, 0x1f, 0x21, 0x3f, 0x24, 0x3f, 0x1c, 0x1f, 0x07, 0x07, 0x01, 0x01, 

// FRAME 02
0xc0, 0xc0, 0x20, 0xe0, 0x16, 0xf6, 0x19, 0xf9, 0x11, 0xf1, 0x11, 0xf1, 0x10, 0xf0, 0x10, 0xf0, 
0xc8, 0xf8, 0x28, 0xf8, 0x8c, 0xfc, 0x42, 0xfe, 0x12, 0xfe, 0x9c, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 
0x7f, 0x7f, 0x80, 0xff, 0x80, 0xff, 0xfc, 0xff, 0x04, 0x07, 0x04, 0x07, 0x7c, 0x7f, 0xc0, 0xff, 
0xf9, 0xff, 0x0a, 0x0f, 0x18, 0x1f, 0x21, 0x3f, 0x24, 0x3f, 0x1c, 0x1f, 0x07, 0x07, 0x01, 0x01, 

// FRAME 03
0xc0, 0xc0, 0x20, 0xe0, 0x16, 0xf6, 0x19, 0xf9, 0x11, 0xf1, 0x11, 0xf1, 0x10, 0xf0, 0x10, 0xf0, 
0xc8, 0xf8, 0x28, 0xf8, 0x8c, 0xfc, 0x42, 0xfe, 0x12, 0xfe, 0x9c, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 
0x7f, 0x7f, 0x80, 0xff, 0x80, 0xff, 0xfc, 0xff, 0x04, 0x07, 0x04, 0x07, 0x04, 0x07, 0x78, 0x7f, 
0xc9, 0xff, 0xfa, 0xff, 0x18, 0x1f, 0x21, 0x3f, 0x24, 0x3f, 0x1c, 0x1f, 0x07, 0x07, 0x01, 0x01,
};

// Jumping sprite
uint8_t PROGMEM monkeyJump[] =
{
// width, height,
16, 16,
// FRAME 00
0xe0, 0xe0, 0x10, 0xf0, 0x08, 0xf8, 0x04, 0xfc, 0x04, 0xfc, 0x04, 0xfc, 0x08, 0xf8, 0x08, 0xf8, 
0x04, 0xfc, 0x02, 0xfe, 0x41, 0xff, 0x89, 0xff, 0x89, 0xff, 0x42, 0xfe, 0x04, 0xfc, 0xf8, 0xf8, 
0x7f, 0x7f, 0x80, 0xff, 0x80, 0xff, 0xfe, 0xff, 0x02, 0x03, 0x0e, 0x0f, 0x10, 0x1f, 0x26, 0x3f, 
0x49, 0x79, 0x91, 0xf1, 0x62, 0x63, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00,
};

uint8_t PROGMEM monkeyJumpR[] =
{
// width, height,
16, 16,
// FRAME 00
0xfe, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x7f, 0xff, 0x40, 0xc0, 0x70, 0xf0, 0x08, 0xf8, 0x64, 0xfc, 
0x92, 0x9e, 0x89, 0x8f, 0x46, 0xc6, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 
0x07, 0x07, 0x08, 0x0f, 0x10, 0x1f, 0x20, 0x3f, 0x20, 0x3f, 0x20, 0x3f, 0x10, 0x1f, 0x10, 0x1f, 
0x20, 0x3f, 0x40, 0x7f, 0x82, 0xff, 0x91, 0xff, 0x91, 0xff, 0x42, 0x7f, 0x20, 0x3f, 0x1f, 0x1f,
};

// SOUNDS
 uint16_t jumpSound[] PROGMEM =
{
  NOTE_C4, 60,
  NOTE_E5, 60,
  NOTE_G5, 80,
  NOTE_E5, 60,
  NOTE_C4, 60,
  
  TONES_END
};

 uint16_t bananaSound[] PROGMEM =
{
  NOTE_G5, 50,
  NOTE_B5, 50,
  NOTE_E6, 70,

  TONES_END
};

 uint16_t deathSound[] PROGMEM =
{
  NOTE_C5, 100,
  NOTE_A4, 100,
  NOTE_F4, 100,
  NOTE_D4, 100,
  NOTE_B3, 120,
  NOTE_G3, 120,
  NOTE_E3, 150,

  TONES_END
};
 
class Player {
  private:
    Arduboy2 *ab;
    ArduboyTones *sound;
    int _x = 5;
    int _y = 0;
    float gravityDelta = 0.125;
    bool airborn = false;
    bool onRight = false;
    bool falling = false;
    uint8_t *currSprite = monkey;
    uint8_t timer = 0;
    uint8_t frame = 0;
    //uint8_t *currMask = monkey_mask;
  
  public:
    Player(Arduboy2 *abPtr, ArduboyTones *soundPtr)
      : ab(abPtr), sound(soundPtr) {}

    int getX() {
      return _x;
    }
    
    int getY() {
      return _y;
    }

    void jump() {
      if (!airborn) {
        if (onRight) {
          currSprite = monkeyJump;
          //currMask = monkeyJump_mask;
        }
        else {
          currSprite = monkeyJumpR;
          //currMask = monkeyJumpR_mask;
        }
        airborn = true;
        sound->tones(jumpSound);
      }
    }

    void fall() 
    { 
      sound->tones(deathSound);
      falling = true;
    }

    void getBanana()
    {
      sound->tones(bananaSound);
    } 

    void reset() {
      _x = 5;
      _y = 0;
      gravityDelta = 0.125;
      airborn = false;
      onRight = false;
      falling = false;
      currSprite = monkey;
    }

    void update() {
      if (airborn) {
        if (onRight) {
          _y -= 4;
        }
        else if (!onRight) {
          _y += 4;
        }

        if (_y == 0 || _y == 48) {
          airborn = false;
          onRight = !onRight;
        }
      }

      // Reset sprite when not airborn
      if (!airborn) {
        if (onRight) {
          currSprite = monkeyR;
          //currMask = monkeyR_mask;
        }
        else {
          currSprite = monkey;
          //currMask = monkey_mask;
        }  
      }

      // Fall when hit
      if (falling) {
        _x -= gravityDelta;
        if (onRight) {
          _y -= 2;
        }
        else if (!onRight) {
          _y += 2;
        }

        if (gravityDelta < 5) gravityDelta += gravityDelta;
        if (_x < -50) falling = false;
      }

      // Animate
      timer++;

      if (timer % 6 == 0)
      {
        frame++;
        if (frame > 3)
        {
          frame = 0;
        }
      }
    }

    void draw() {
      if (airborn)
      {
        frame = 0;
      }
      Sprites::drawPlusMask(_x, _y, currSprite, frame);
    }
};

#endif
